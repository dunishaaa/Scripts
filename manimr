#!/bin/bash

SAVEIF=$IFS
IFS=$'\n'

file_path=""
scene_name=""
quality=""
quality_flag=""
scenes=""
render_by_section=0


skip_scene="self.next_section(skip_animations=True)"
render_scene="self.next_section(skip_animations=False)"

print_usage(){
	printf "Usage: manimr [OPTIONS] <file_name>\n"
	printf "Options:\n"
	printf " --help\t\tDisplay usage\n"
	printf " -k\t\tRender with in 4K\t\t4Kp120\n"
	printf " -h\t\tRender with high quality\t1080p60\n"
	printf " -l\t\tRender with low quality\t\t420p15\n"
	printf " -n\t\tShow scene names\n"
	printf " -s\t\tRender scene section. Scenes marked with #rs\n"
	printf "\t\tare rendered and #ss are skipped\n"
}

missing_file(){
	echo "ERROR: Missing file"
	print_usage
	exit 1
}

get_scenes(){
	scenes=$(grep -oh "\w*(Scene)" $file_path | sed 's/(Scene)//')
	scenes=($scenes)

	echo "Select a scene to render..." 
	for ((i = 0; i<${#scenes[@]}; i++)) 
	do 
		ti=i 
		((ti++)) 
		printf "\t$ti) ${scenes[$i]}\n" 
	done 
	read -p "Choose scene: " n_scene 
	((n_scene--)) 
	scene_name=${scenes[n_scene]} 
}

function get_scene(){

    declare -A line_matches

    file=$1
    line=$2
    nearest=100000
    scene=""

    while IFS=: read -r line_number match; do
        line_matches["$line_number"]="$match"
    done < <(grep -noh "\w*(Scene)" $file)

    for line_number in "${!line_matches[@]}"; do
        line_matches[$line_number]=$(echo ${line_matches[$line_number]} | sed 's/(Scene)//')
        cur=$(( $line - $line_number))
        if [ $cur -ge 0 ]; then
            if [ $cur -le $nearest ]; then
                nearest=$cur
                scene_name=${line_matches[$line_number]}
            fi
        fi
    done
    # echo "Nearest function -> $scene_name"

}


handle_options(){
	if [[ "$1" != -* ]]; then
		echo "ERROR: Flag must be specified"
		print_usage
		exit 1
	fi

	while [ $# -gt 0 ]; do
		case $1 in
		--help)
			print_usage
			exit 0
			;;
		-h)  
			quality="1080p60"
			quality_flag="h"
			break
			;;
		-l)
			quality="480p15"
			quality_flag="l"
			break
			;;
        -k)
			quality="2160p60"
			quality_flag="k"
			break
			;;
		-n) 
			if [[ -z "$2" ]]; then
				missing_file
			fi
			file_path=$2
			scenes=$(grep -oh "\w*(Scene)" $file_path | sed 's/(Scene)//')
			scenes=($scenes)

			echo "Scenes in $file_path are:"
			for ((i = 0; i<${#scenes[@]}; i++))
			do
				ti=i
				((ti++))
				printf "\t$ti) ${scenes[$i]}\n"
			done
			exit 0
			;;
		-s)
			if [[ -z "$4" ]]; then
				missing_file
			fi
            render_by_section=1
			;;

		\?)
			echo "ERROR: invalid argument"
			print_usage
			exit 1
			;;
		*)
			echo "ERROR: invalid $1 option"
			print_usage
			exit 1 
			;;
		esac
		shift
	done
}

validate_render(){
	if [[ "$1" == -s  ]]; then
		shift
	fi

	shift
	if [[ -z "$2" ]]; then
		missing_file
	fi

    file_path=$(realpath $2)
    line_number=$1

    get_scene $file_path $line_number

}

render(){

    copy_file_path="${file_path%/*}" #/${output_folder}_copy.py"

    python_file=${file_path##*/}

	output_folder=${python_file%.py}

    copy_file_path="${copy_file_path}/${output_folder}_copy.py"
    output_folder="${output_folder}_copy"
    echo $copy_file_path
	echo $output_folder

    cp $file_path $copy_file_path

    if [ $render_by_section -eq 1 ]; then
        echo "Rendering by sections"
        sed -i "s/\# *ss/$skip_scene/g" $copy_file_path
        sed -i "s/\# *rs/$render_scene/g" $copy_file_path
    fi

    echo "Rendering $copy_file_path $scene_name"
	manim -q$quality_flag $copy_file_path $scene_name

    rm $copy_file_path



    cur_dir=$(echo $copy_file_path | sed "s/\/\w*\..*$//g")



	pt_rnd_video=$cur_dir"/media/videos/"$output_folder"/"$quality"/"$scene_name".mp4"
	res=$(ls $pt_rnd_video)
	if [[ ! -z res ]]; then
		firefox $pt_rnd_video
	fi

}

handle_options "$@"
validate_render "$@"
render "$@"






